{
  "hash": "72248daf706a97cb4b6f4d5e26590f83",
  "result": {
    "markdown": "---\ntitle: \"Running Rscripts in a loaded project\"\nauthor: \"VLab Course Team\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\nengine: knitr\n---\n\n\nBefore running any code in a repository, make sure you are **inside the correct R project** (`.Rproj`). This activates project-specific settings (including `renv`) and sets the working directory properly.\n\n---\n\n## Step 1 — Open the project (`.Rproj`)\n\nOpen a project using one of these options:\n\n- **From the Files pane** (bottom-right): navigate to the repository folder and click the `.Rproj` file.\n- **Programmatically (requires `rstudioapi`)**:\n\n```r\nif (!requireNamespace(\"rstudioapi\", quietly = TRUE)) install.packages(\"rstudioapi\")\nrstudioapi::openProject(\"~/GitHubRepos/geoflow-tunaatlas/stable\")\n```\n\n> Opening the `.Rproj` ensures that `renv` is activated via the project’s `.Rprofile` and that your working directory is correct.\n\n---\n\n## Step 2 — Restore the Project environment with `renv`\n\nThe [`renv` package](https://rstudio.github.io/renv/) manages **project-specific R environments** to guarantee **reproducibility**. It records exact package versions in `renv.lock` and restores them on any machine.\n\nRun this once per project:\n\n```r\nrenv::restore()\n```\n\nWhat this does:\n\n- Installs missing packages **or** links them from VLab’s **shared cache** (fast).\n- Aligns your session’s packages with the versions expected by the project.\n\nUseful tips:\n\n```r\n# Check environment status (optional)\nrenv::status()\n\n# If prompted after updates, restart your R session\nif (requireNamespace(\"rstudioapi\", quietly = TRUE)) rstudioapi::restartSession()\n```\n\n> ✅ **Always** run `renv::restore()` when you open a **new** repository.  \n> ℹ️ A later section of this course dives deeper into `renv`, shared caches in VLab, and linking multiple repos to a common cache directory.\n\nIf you want to use the cache renv with your own projects or within your Vlab feel free to follow this tutorial [renv cache path](renv-cache-path.qmd). \n\n---\n\n## Example with geoflow-tunaatlas project\n\n### Step 3: Explore the `.Rmd` report\n\nThe file `summary_catch.Rmd` is an R Markdown document that allows you to explore catch datasets and generate visual outputs like maps and plots. A similar file is also available for effort data.\n\nYou can render the entire report at once using:\n\n```r\nrmarkdown::render(\"summary_catch.Rmd\")\n```\n\nHowever, for learning purposes, we recommend exploring the file chunk-by-chunk to understand each step in the workflow.\n\nOpen the file in the RStudio editor and review each code block, which typically includes:\n- Data loading from zenodo, or in the VLab from existing folder (to avoid re-downloading data)\n- Data transformation and filtering\n- Visualization with maps and plots\n- Output generation\n\n### Outputs\nExecuting the full `.Rmd` will generate an HTML report and may also create visual outputs or data files, often saved in the same directory or an `outputs/` subfolder.\n\nNote: `geoflow-tunaatlas` is the most complex repository used in this course. It contains several scripts, workflows, and Docker-related files beyond the `.Rmd` example shown here.\n\n---\n\n## Other repositories\n\nFor all of the other repositories in this course: \n- `tunaatlas_pie_map_shiny`\n- `shiny_compare_tunaatlas_datasets`\n- `darwin_core_viewer`\nthe usage is much simpler. You typically only need two commands to get started:\n\n```r\nrenv::restore()\nshiny::runApp()\n```\n\nThese repositories are Shiny apps that can be launched directly after restoring the environment.\n\nYou're now ready to explore and execute workflows and Shiny apps across all repositories in VLab!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "e4b39a7897edb1302aa0cea6f3fb3af5",
  "result": {
    "markdown": "---\ntitle: \"Bonus Personal renv cache on RStudio Server (BlueCloud 2026 infrastructure)\"\nauthor: \"VLab Course Team\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\nengine: knitr\n---\n\n\n> This independent note explains how **any RStudio Server user on the infrastructure** can use a **shared/global `renv` cache** without modifying Docker images or course repositories.\n\n## Why use a personal `renv` cache setting?\n- Avoid reinstalling the same packages for every project.  \n- Speed up `renv::restore()` across projects by reusing binaries.  \n- Keep full reproducibility (each project still uses its own `renv.lock`).\n\n---\n\n## Option A — Set a user-level cache in `~/.Renviron`\nCreate (or edit) a file named `~/.Renviron` and add:\n\n```r\nRENV_PATHS_CACHE=~/blue-cloud-dataspace/GlobalFisheriesAtlas/cacheRenv\n```\n\nThen **restart R** (Session → Restart R). From now on, all your projects will use this cache automatically.\n\n**Notes:**\n\n- The path can be **any directory** you can read/write.  \n- Using a location under **`~/blue-cloud-dataspace/`** makes the cache accessible across workspaces on the infrastructure (shared but possibly a bit slower than other folders from the workspace).\n- To avoid issues caused by cache corruption or accidental deletions (since the cache folders are shared), you can isolate your project libraries from the mutual cache using:\n\n```r\nrenv::isolate()\n```\n\nThis command copies all the required packages directly into the renv folder of your project.\nBe cautious when running this locally, as it can significantly increase disk usage.\n\n---\n\n## Option B — Set a project-level cache in `<project>/.Renviron`\nIf you prefer to scope the cache setting to a **single project**, create a file named `.Renviron` in the **project root** (next to `.Rproj`) with:\n\n```r\nRENV_PATHS_CACHE=~/blue-cloud-dataspace/GlobalFisheriesAtlas/cacheRenv\n```\n\nRestart R inside the project. Only this project will use that cache.\n\n---\n\n## Verify your configuration\nRun these checks in the R console:\n\n```r\n# What cache path is currently active?\nSys.getenv(\"RENV_PATHS_CACHE\")\n\n# Where does renv think the cache lives?\nrenv::paths$cache()\n\n# Project environment status (optional)\nrenv::status()\n```\n\nIf you change `~/.Renviron` or `<project>/.Renviron`, **restart R** to apply.\n\n---\n\n## Using the cache with projects\nInside any project (after opening the `.Rproj`):\n\n```r\nrenv::restore()   # will reuse packages from the shared cache when versions match\n```\n\nPackages required by `renv.lock` will be **linked or installed once** into the cache and reused next time.\n\n---\n\n## Good practices & caveats\n- Keep the cache path **stable**; moving it breaks existing links.  \n- If the cache becomes very large, you can clean unused entries with `renv::cache_clean()` (advanced).  \n- The cache is **per R version**; upgrading R may create a new cache tree.  \n- Shared locations improve reuse across projects and users, but network storage can be slower than local disk.\n\n---\n\n## Notes on group-specific caches\nIn this course, we configured our cache in:\n\n```r\n~/blue-cloud-dataspace/GlobalFisheriesAtlas/cacheRenv\n```\n\nbecause it is the one we use in the Vlab 5.\n\nBut you are free to define a **different cache path** that matches your own setup:\n\n- A cache specific to your **group of projects**\n- A cache specific to your **VLab instance**\n\nThis flexibility lets different groups share a cache internally while keeping separation from other workspaces.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
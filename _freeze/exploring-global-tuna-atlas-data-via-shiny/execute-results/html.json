{
  "hash": "51c61b3fd70aa3972ba38124ecb90101",
  "result": {
    "markdown": "---\ntitle: \"Exploring Global Tuna Atlas Data via Shiny (15 min)\"\nauthor: \"VLab Course Team\"\nformat:\n  html:\n    toc: true\n    toc-depth: 2\nengine: knitr\n---\n\n\n> **Objective:** Learn how to interact with processed GTA datasets through dynamic **Shiny** applications, understand the **benefits/limits** of each app, and how CWP-formatted datasets fit in.  \n> **Prerequisite:** Good understanding of GTA datasets (Levels, effort, CPUE).  \n> **Presentation:** Hands-on demo + selfâ€‘exploration + short quiz.  \n> **Outcome:** Learners can use a Shiny app to explore GTA datasets **with or without writing code**.\n\n---\n\n## Quick Start in VLab5\n\nShiny apps can be accessed in **two ways**:\n\n1. From the **Shiny Apps tab** in VLab â†’ directly launch stable or dev versions of available apps.\n2. From the repository in `~/GitHubRepos` â†’ open the `.Rproj`, restore packages, and run `shiny::runApp()`.\n\n> All Shiny apps have **stable and dev versions**, except **darwin_core_viewer** which is only available as a stable version in the Shiny Apps tab.\n\n## Outside Vlab 5\n\nIf youâ€™re not (yet) a VLab5 member, you can still run the Shiny app locally using Docker.\n\n> **Note:** Docker images can be large and the app may require several GB of RAM.\n\n```bash\ndocker pull ghcr.io/<name-of-the-shiny-app-repo-eg.firms-gta/tunaatlas_pie_map_shiny> #(first time only)\ndocker run --rm --name tunaatlas \\\n  -p 3838:3838 \\\n  ghcr.io/<name-of-the-shiny-app-repo-eg.firms-gta/tunaatlas_pie_map_shiny>\n\n```\n\nand then open http://127.0.0.1:3838/\n\n---\n\n## ðŸ“¦ Shiny Apps in this lesson\n\n### Main apps (available in Shiny Apps tab)\n- **tunaatlas_pie_map_shiny** (stable + dev)  \n  *Purpose:* Visualize **any dataset in CWP format** (catch/effort) with interactive **maps and plots**.  \n  *Docs:* See repo **README** for supported schemas, required columns, and examples.  \n  *GitHub:* <https://github.com/firms-gta/tunaatlas_pie_map_shiny>\n\n- **shiny_compare_tunaatlas_datasets** (stable + dev)  \n  *Purpose:* **Compare** harmonized GTA datasets (e.g., different Zenodo DOIs / releases / parameters).  \n  *Docs:* README describes how to reference DOIs and comparison keys.  \n  *GitHub:* <https://github.com/firms-gta/shiny_compare_fisheries_datasets>\n\n### Additional app\n- **darwin_core_viewer** (stable only)  \n  *Purpose:* Minimal viewer for **Darwin Core** biodiversity data (maps + plots). Good **template** for custom viewers.  \n  *Docs:* README covers expected Darwin Core fields (e.g., `scientificName`, `eventDate`, `decimalLatitude/Longitude`).  \n  *GitHub:* <https://github.com/firms-gta/darwin_core_viewer>\n\n---\n\n## Example walkthroughs\n\n### A) Explore a CWP dataset with `tunaatlas_pie_map_shiny`\n1. From the **Shiny Apps tab**, open the stable version (recommended).  \n   *(Alternatively, run locally with `shiny::runApp()` after restoring packages.)*  \n2. A formatted dataset is already loaded. You can as well choose a different dataset to explore in the 'Choose dataset' panel.\n3. **Filter** â†’ by species, gear, year range, area.  \n4. **Visualize** â†’ interactive map (e.g., 5Â° grid) + plots; export as needed (see README).\n\n**Strengths**: quick exploration, mapâ€‘centric, supports broad CWP datasets.  \n**Limits**: depends on schema conformity; heavy datasets may be slow.\n\n### B) Compare several GTA releases with `shiny_compare_tunaatlas_datasets`\n1. From the **Shiny Apps tab**, open dev or stable version.  \n2. Datasets are already loaded from DOIs. If you want to explore other datasets, just update the DOI.csv file in the repository.  \n3. **Choose keys** (year/area/gear/species).  \n4. **Inspect differences** â†’ tables/plots of differences, coverage, and changes.  \n\n**Strengths**: release comparisons, quick differences across versions.  \n**Limits**: assumes comparable schemas; interpret differencies carefully as the differences of processes for each datasets are complex.\n\n---\n\n## Strengths vs. limitations of GUI tools\n**Strengths**\n\n- Lower barrier to entry â€” no code needed.  \n- Fast exploratory analysis & visual quality assurance.  \n- Standardized filters/views reduce errors.\n\n**Limitations**\n\n- Less flexible than writing code for bespoke analytics.  \n- Performance can degrade on very large datasets.  \n- Schema assumptions must be respected (CWP format).\n\n<!-- --- -->\n\n<!-- ## Optional: Where CWP fits -->\n<!-- - **CWP standards** (species, gear, area) are the **backbone** of harmonization.   -->\n<!-- - Shiny apps expect datasets that follow these codes; otherwise mapping fails or fields wonâ€™t populate.   -->\n<!-- - If you need a refresher, see Lesson **3.1** (standards & FAIR) or Module 1. -->\n\n---\n\n<!-- ## Bonus: What is ShinyProxy? -->\n<!-- A containerâ€‘based platform for **hosting Shiny apps** at scale (auth, routing, resource control). The GTA apps can be served through ShinyProxy.   -->\n<!-- > Coordinate with your platform admin (e.g., **Julien Barde**) for deployment specifics (images, memory, user mapping).   -->\n<!-- > See each repoâ€™s **README** for containerization notes or Dockerfiles. -->\n\n<!-- ðŸ“Œ There is also a **Shiny App Deployment Guide**, but this will be covered in a **separate bonus lesson**. -->\n\n<!-- --- -->\n\n<!-- ## Mini Task + Quick Quiz -->\n<!-- **Task (5â€“10 min)**   -->\n<!-- - Launch `tunaatlas_pie_map_shiny` from the Shiny Apps tab, load a CWP catch dataset, filter for one species (e.g., `SKJ`) and 2015â€“2020, and export a plot. -->\n\n<!-- **Quiz (2 items)**   -->\n<!-- 1) Which constraint is **most** crucial for these apps to work?   -->\n<!-- - A) File naming   -->\n<!-- - B) CWP schema conformity âœ…   -->\n<!-- - C) Folder depth   -->\n\n<!-- 2) `shiny_compare_tunaatlas_datasets` is mainly used toâ€¦   -->\n<!-- - A) Edit raw CSVs   -->\n<!-- - B) Compare DOI releases âœ…   -->\n<!-- - C) Generate CPUE -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
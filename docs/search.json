[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "vlab5-course",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "intro-rstudio.html",
    "href": "intro-rstudio.html",
    "title": "Introduction to VLab5 and RStudio Server",
    "section": "",
    "text": "This short notebook will guide you through the key features and technical setup of the RStudio Server in VLab5.\n\n\nTo begin working in VLab5 with R workflows, start by navigating to the Analytics section on the platform.\nYou have two main options to launch an RStudio session:\n\nRStudio on D4Science (Start) ‚Äì This is the default environment. It includes all preloaded repositories you‚Äôll use in this course (both stable and dev versions). It has limited RAM compared to the second option.\nRStudio on GoogleCloud (Start) ‚Äì This environment offers more RAM and computing power, which can be useful for heavier computations. However, it does not include the preloaded repositories by default. If you use it, you‚Äôll need to manually configure and copy the necessary projects.\n\nOnce you launch either version, you‚Äôll enter a standard RStudio Server interface directly in your browser.\nRStudio is organized into four panes:\n\nTop-left: Script editor\nBottom-left: Console and Terminal\n\nThe Console is where you type and run R code interactively.\nThe Terminal provides access to a Unix shell, useful for running system commands (e.g., Git, file management).\nThe Background Jobs tab (when visible) lets you launch long-running scripts without blocking the console. You can track progress and logs independently.\n\n\n\nüß© These tabs are modular: you can show or hide panes using the menu bar ‚Üí View > Panes or via the small gear icons in the top-right of each panel.\n\n\nTop-right: Environment, History, Git, Connections, Build, Tutorial\n\nThe Environment tab lists all current objects (datasets, models, functions).\nHistory tracks all commands you‚Äôve run.\nGit appears if the project is under version control.\nBuild is used for R packages or Quarto/Bookdown projects.\nTutorial can show RStudio tutorials if available.\n\nBottom-right: Files, Plots, Packages, Help, and Viewer\n\nThis pane lets you navigate directories, visualize plots, install/view packages, access help pages, and render HTML outputs.\n\n\nTo explore the technical setup of your session, run the following lines of code in the R console:\n\n\n\n\n\n\nR.version.string\n\n[1] \"R version 4.2.3 (2023-03-15)\"\n\n\n\n\n\n\nrstudioapi::versionInfo()\n\nThis returns information such as: - version: RStudio version installed (e.g., 2023.3.0.386) - release_name: Code name for the release (e.g., Cherry Blossom) - mode: Whether you‚Äôre on the server version\n\n\n\n\nSys.info()\n\n                                                          sysname \n                                                          \"Linux\" \n                                                          release \n                                             \"4.15.0-189-generic\" \n                                                          version \n                   \"#200-Ubuntu SMP Wed Jun 22 19:53:37 UTC 2022\" \n                                                         nodename \n\"jupyter-bastien-2egrasset65011--rname-2d-52-53tudio-53erver-4fp\" \n                                                          machine \n                                                         \"x86_64\" \n                                                            login \n                                                        \"unknown\" \n                                                             user \n                                                         \"jovyan\" \n                                                   effective_user \n                                                         \"jovyan\" \n\n\nYou‚Äôll see OS-level details such as: - sysname: Operating system - release: Kernel version - machine: Architecture (usually x86_64) - user: Your current user session (likely jovyan)\n\n\n\n# Note: this uses system-level shell command\nsystem(\"free -g\")\nThis command shows approximate memory allocation: - total: Total memory available (e.g., 125 GB) - used and available: What‚Äôs currently in use or free\n\n‚ö†Ô∏è Note: The number you see in ‚Äúavailable‚Äù RAM may be lower (e.g., 32 GB) due to container quotas or dynamic allocation. The full infrastructure may have more memory, but your session may be limited based on demand and environment.\nüìä To get a user-friendly view of the actual allocated RAM, go to the top-right Environment panel in RStudio and click ‚ÄúMemory usage report‚Äù. This tool gives you a live snapshot of RAM used by your session.\n\n\n\n\n\ninstalled.packages()[1:20, c(\"Package\", \"Version\")]\n\n            Package       Version \nantiword    \"antiword\"    \"1.3.4\" \nbase64enc   \"base64enc\"   \"0.1-3\" \nbslib       \"bslib\"       \"0.7.0\" \ncachem      \"cachem\"      \"1.0.8\" \ncli         \"cli\"         \"3.6.2\" \ncommonmark  \"commonmark\"  \"2.0.0\" \ndigest      \"digest\"      \"0.6.35\"\nevaluate    \"evaluate\"    \"0.23\"  \nfastmap     \"fastmap\"     \"1.1.1\" \nfontawesome \"fontawesome\" \"0.5.2\" \nfs          \"fs\"          \"1.6.3\" \nglue        \"glue\"        \"1.7.0\" \nhighr       \"highr\"       \"0.10\"  \nhtmltools   \"htmltools\"   \"0.5.8\" \njquerylib   \"jquerylib\"   \"0.1.4\" \njsonlite    \"jsonlite\"    \"1.8.8\" \nknitr       \"knitr\"       \"1.45\"  \nlifecycle   \"lifecycle\"   \"1.0.4\" \nlitedown    \"litedown\"    \"0.7\"   \nmagrittr    \"magrittr\"    \"2.0.3\" \n\n\nThis shows the first 20 installed packages and their versions. You can increase the number for a full list.\n\n\n\n\n# Try loading a utility package\nrequire(antiword)\n\nLoading required package: antiword\n\n\nIf successful, this confirms that the package and its dependencies are correctly installed.\n\n\n\n\n\n\nAll environments and package lists may evolve over time.\nThe VLab infrastructure will be updated regularly to keep compatibility with the course materials.\nYou can always re-run this notebook to verify your session.\n\n\nNext step: Now that you know your environment, proceed to Project Organization and explore the available repositories!"
  },
  {
    "objectID": "project-organization.html",
    "href": "project-organization.html",
    "title": "VLab5 Course",
    "section": "",
    "text": "All project repositories used in this course are pre-installed in your environment.\n\n\nProjects are located in:\n~/GitHubRepos\nTo view the full list of repositories (including dev and stable subfolders), you can run the following in the Terminal:\nfind ~/GitHubRepos -maxdepth 2 -exec ls -ld {} \\;\nThis will show the folder structure and help you identify which projects are available.\n\n\n\n\nSome repositories include only a dev version ‚Üí they are currently under development.\nOthers include both:\n\nstable/: the latest release from the main branch.\ndev/: the most recent push to the dev branch.\n\n\n\n\n\n\n\n\nRepository\nVersions\nDescription\nMain Script\nGitHub\n\n\n\n\ngeoflow-tunaatlas\nstable + dev\nPrepares the Global Tuna Atlas datasets (Levels 0, 1, 2; effort and CPUE) and deploys them to Zenodo. Also contains Dockerfiles for downloading source datasets and running workflows.\nlaunching_jsons_creating_GTA.R\nGitHub\n\n\ntunaatlas_pie_map_shiny\nstable + dev\nA Shiny app for visualizing any dataset in CWP format with various plots and maps.\nglobal.R\nGitHub\n\n\nshiny_compare_tunaatlas_datasets\ndev only\nA Shiny app to compare GTA datasets from zenodo DOIs.\nglobal.R\nGitHub\n\n\ndarwin_core_viewer\ndev only\nA basic Shiny app to visualize biodiversity data using the Darwin Core data format. Provides maps and plots. Designed as a starting point for custom apps.\napp.R\nGitHub\n\n\n\n\nüìå Documentation for each project is available in the README.md files within the folders, and on the respective GitHub repositories.\n\n\nYou can open and explore any of these projects directly in RStudio by navigating to the appropriate folder using the Files tab, or via setwd(\"~/GitHubRepos/<project>/<version>/<project>\") in your console.\nReady to run your first workflow? Jump to the next section about"
  },
  {
    "objectID": "running-scripts-in-loaded-repo.html",
    "href": "running-scripts-in-loaded-repo.html",
    "title": "VLab5 Course",
    "section": "",
    "text": "Before running any code in a repository, it‚Äôs important to ensure the right packages are installed and loaded.\n\n\nEach repository comes with a pre-configured environment managed by renv. This ensures all necessary packages are available and compatible.\nRun the following command in the console:\nrenv::restore()\nThis command will install (or link from cache) all required packages listed in the project‚Äôs renv.lock file.\n\n‚úÖ Do this every time you open a new repository, even if it‚Äôs already been used before.\n\n\n‚ÑπÔ∏è A more detailed section is available later in this course, covering advanced renv usage, shared caching in VLab environments, and how to link multiple repositories to a common cache directory.\n\nYou may need to reload the session beof"
  },
  {
    "objectID": "running-scripts-in-loaded-repo.html#example-running-a-workflow-in-the-geoflow-tunaatlas-project.",
    "href": "running-scripts-in-loaded-repo.html#example-running-a-workflow-in-the-geoflow-tunaatlas-project.",
    "title": "VLab5 Course",
    "section": "Example: Running a Workflow in the geoflow-tunaatlas project.",
    "text": "Example: Running a Workflow in the geoflow-tunaatlas project.\nWe‚Äôll now run an example R Markdown workflow included in the repository.\n\nStep 2: Open the Repository Folder\nsetwd(\"~/GitHubRepos/geoflow-tunaatlas/stable\")\n\n\nStep 3: Explore the .Rmd Report\nThe file summary_catch.Rmd is an R Markdown document that allows you to explore catch datasets and generate visual outputs like maps and plots. A similar file is also available for effort data.\nYou can render the entire report at once using:\nrmarkdown::render(\"summary_catch.Rmd\")\nHowever, for learning purposes, we recommend exploring the file chunk-by-chunk to understand each step in the workflow.\nOpen the file in the RStudio editor and review each code block, which typically includes: - Data loading from zenodo, or in the VLab from existing folder (to avoid re-downloading data) - Data transformation and filtering - Visualization with maps and plots - Output generation\n\n\nOutputs\nExecuting the full .Rmd will generate an HTML report and may also create visual outputs or data files, often saved in the same directory or an outputs/ subfolder.\nNote: geoflow-tunaatlas is the most complex repository used in this course. It contains several scripts, workflows, and Docker-related files beyond the .Rmd example shown here."
  },
  {
    "objectID": "running-scripts-in-loaded-repo.html#step-4-other-repositories",
    "href": "running-scripts-in-loaded-repo.html#step-4-other-repositories",
    "title": "VLab5 Course",
    "section": "Step 4: Other Repositories",
    "text": "Step 4: Other Repositories\nFor all of the other repositories in this course: - tunaatlas_pie_map_shiny - shiny_compare_tunaatlas_datasets - darwin_core_viewer the usage is much simpler. You typically only need two commands to get started:\nrenv::restore()\nshiny::runApp()\nThese repositories are Shiny apps that can be launched directly after restoring the environment.\nYou‚Äôre now ready to explore and execute workflows and Shiny apps across all repositories in VLab!"
  }
]